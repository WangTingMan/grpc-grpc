// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server_streaming_rpc.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_server_5fstreaming_5frpc_2eproto__INCLUDED
#define GRPC_server_5fstreaming_5frpc_2eproto__INCLUDED

#include "server_streaming_rpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace helloworld {

// The greeting service definition.
class HelloService final {
 public:
  static constexpr char const* service_full_name() {
    return "helloworld.HelloService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::helloworld::MessageFromClient>> ClientStreamMessages(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::helloworld::MessageFromClient>>(ClientStreamMessagesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::helloworld::MessageFromClient>> AsyncClientStreamMessages(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::helloworld::MessageFromClient>>(AsyncClientStreamMessagesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::helloworld::MessageFromClient>> PrepareAsyncClientStreamMessages(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::helloworld::MessageFromClient>>(PrepareAsyncClientStreamMessagesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::MessageFromServer>> ServerStreamMessages(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::MessageFromServer>>(ServerStreamMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::MessageFromServer>> AsyncServerStreamMessages(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::MessageFromServer>>(AsyncServerStreamMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::MessageFromServer>> PrepareAsyncServerStreamMessages(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::MessageFromServer>>(PrepareAsyncServerStreamMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>> BidirectionalStreamMessages(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>>(BidirectionalStreamMessagesRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>> AsyncBidirectionalStreamMessages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>>(AsyncBidirectionalStreamMessagesRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>> PrepareAsyncBidirectionalStreamMessages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>>(PrepareAsyncBidirectionalStreamMessagesRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a greeting
      virtual void SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::helloworld::MessageFromClient>* ClientStreamMessagesRaw(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::helloworld::MessageFromClient>* AsyncClientStreamMessagesRaw(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::helloworld::MessageFromClient>* PrepareAsyncClientStreamMessagesRaw(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::helloworld::MessageFromServer>* ServerStreamMessagesRaw(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helloworld::MessageFromServer>* AsyncServerStreamMessagesRaw(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helloworld::MessageFromServer>* PrepareAsyncServerStreamMessagesRaw(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>* BidirectionalStreamMessagesRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>* AsyncBidirectionalStreamMessagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>* PrepareAsyncBidirectionalStreamMessagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::helloworld::MessageFromClient>> ClientStreamMessages(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::helloworld::MessageFromClient>>(ClientStreamMessagesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::helloworld::MessageFromClient>> AsyncClientStreamMessages(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::helloworld::MessageFromClient>>(AsyncClientStreamMessagesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::helloworld::MessageFromClient>> PrepareAsyncClientStreamMessages(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::helloworld::MessageFromClient>>(PrepareAsyncClientStreamMessagesRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helloworld::MessageFromServer>> ServerStreamMessages(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helloworld::MessageFromServer>>(ServerStreamMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::MessageFromServer>> AsyncServerStreamMessages(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::MessageFromServer>>(AsyncServerStreamMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::MessageFromServer>> PrepareAsyncServerStreamMessages(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::MessageFromServer>>(PrepareAsyncServerStreamMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>> BidirectionalStreamMessages(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>>(BidirectionalStreamMessagesRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>> AsyncBidirectionalStreamMessages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>>(AsyncBidirectionalStreamMessagesRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>> PrepareAsyncBidirectionalStreamMessages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>>(PrepareAsyncBidirectionalStreamMessagesRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::helloworld::MessageFromClient>* ClientStreamMessagesRaw(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response) override;
    ::grpc::ClientAsyncWriter< ::helloworld::MessageFromClient>* AsyncClientStreamMessagesRaw(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::helloworld::MessageFromClient>* PrepareAsyncClientStreamMessagesRaw(::grpc::ClientContext* context, ::helloworld::MessageFromServer* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::helloworld::MessageFromServer>* ServerStreamMessagesRaw(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request) override;
    ::grpc::ClientAsyncReader< ::helloworld::MessageFromServer>* AsyncServerStreamMessagesRaw(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::helloworld::MessageFromServer>* PrepareAsyncServerStreamMessagesRaw(::grpc::ClientContext* context, const ::helloworld::MessageFromClient& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>* BidirectionalStreamMessagesRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>* AsyncBidirectionalStreamMessagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>* PrepareAsyncBidirectionalStreamMessagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_ClientStreamMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerStreamMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_BidirectionalStreamMessages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response);
    virtual ::grpc::Status ClientStreamMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::helloworld::MessageFromClient>* reader, ::helloworld::MessageFromServer* response);
    virtual ::grpc::Status ServerStreamMessages(::grpc::ServerContext* context, const ::helloworld::MessageFromClient* request, ::grpc::ServerWriter< ::helloworld::MessageFromServer>* writer);
    virtual ::grpc::Status BidirectionalStreamMessages(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::helloworld::MessageFromServer, ::helloworld::MessageFromClient>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientStreamMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ClientStreamMessages() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ClientStreamMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::helloworld::MessageFromClient>* reader, ::helloworld::MessageFromServer* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStreamMessages(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::helloworld::MessageFromServer, ::helloworld::MessageFromClient>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerStreamMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ServerStreamMessages() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ServerStreamMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamMessages(::grpc::ServerContext* context, const ::helloworld::MessageFromClient* request, ::grpc::ServerWriter< ::helloworld::MessageFromServer>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamMessages(::grpc::ServerContext* context, ::helloworld::MessageFromClient* request, ::grpc::ServerAsyncWriter< ::helloworld::MessageFromServer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BidirectionalStreamMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BidirectionalStreamMessages() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BidirectionalStreamMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionalStreamMessages(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::helloworld::MessageFromServer, ::helloworld::MessageFromClient>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidirectionalStreamMessages(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::helloworld::MessageFromServer, ::helloworld::MessageFromClient>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_ClientStreamMessages<WithAsyncMethod_ServerStreamMessages<WithAsyncMethod_BidirectionalStreamMessages<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClientStreamMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ClientStreamMessages() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ClientStreamMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::helloworld::MessageFromClient>* reader, ::helloworld::MessageFromServer* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerStreamMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ServerStreamMessages() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ServerStreamMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamMessages(::grpc::ServerContext* context, const ::helloworld::MessageFromClient* request, ::grpc::ServerWriter< ::helloworld::MessageFromServer>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BidirectionalStreamMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BidirectionalStreamMessages() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BidirectionalStreamMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionalStreamMessages(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::helloworld::MessageFromServer, ::helloworld::MessageFromClient>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientStreamMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ClientStreamMessages() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ClientStreamMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::helloworld::MessageFromClient>* reader, ::helloworld::MessageFromServer* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStreamMessages(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerStreamMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ServerStreamMessages() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ServerStreamMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamMessages(::grpc::ServerContext* context, const ::helloworld::MessageFromClient* request, ::grpc::ServerWriter< ::helloworld::MessageFromServer>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BidirectionalStreamMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BidirectionalStreamMessages() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BidirectionalStreamMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionalStreamMessages(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::helloworld::MessageFromServer, ::helloworld::MessageFromClient>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidirectionalStreamMessages(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::helloworld::HelloRequest, ::helloworld::HelloReply>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::helloworld::HelloRequest,::helloworld::HelloReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ServerStreamMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ServerStreamMessages() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::helloworld::MessageFromClient, ::helloworld::MessageFromServer>(std::bind(&WithSplitStreamingMethod_ServerStreamMessages<BaseClass>::StreamedServerStreamMessages, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ServerStreamMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerStreamMessages(::grpc::ServerContext* context, const ::helloworld::MessageFromClient* request, ::grpc::ServerWriter< ::helloworld::MessageFromServer>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedServerStreamMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::helloworld::MessageFromClient,::helloworld::MessageFromServer>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ServerStreamMessages<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithSplitStreamingMethod_ServerStreamMessages<Service > > StreamedService;
};

}  // namespace helloworld


#endif  // GRPC_server_5fstreaming_5frpc_2eproto__INCLUDED
